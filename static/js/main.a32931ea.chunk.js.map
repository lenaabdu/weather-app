{"version":3,"sources":["components/weather.js","components/top.js","components/forcastday.js","components/bottom.js","App.js","serviceWorker.js","store.js","index.js"],"names":["Weather","props","this","location","description","image","img","tempe","Math","round","temp","className","src","React","Component","TopSection","state","Forcastday","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","maxTemp","max","minTemp","min","windSpeed","wind","Card","Header","as","Image","alt","Body","Text","text","Table","striped","bordered","hover","size","colSpan","BottomSection","forecastdays","map","current","i","key","dt","weather","icon","main","wind_speed","App","cityName","isLoading","axios","get","then","res","console","log","data","setState","daily","catch","err","error","updateWeather","Boolean","window","hostname","match","Store","eventEmitter","EventEmitter","appName","Children","children","child","cloneElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a32931ea.chunk.js","sourcesContent":["import React from \"react\";\r\nexport default class Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { location, description,img } = this.props;\r\n    const image = `http://openweathermap.org/img/wn/${this.props.img}@2x.png`\r\n    const tempe = Math.round(this.props.temp, 1)\r\n    return (\r\n      <div className=\"weather-container\">\r\n        <div className=\"header\">{location}</div>\r\n        <br/>\r\n        <div className=\"header\"></div>\r\n        <div className=\"inner-container\">\r\n          <div className=\"image\">\r\n            <img src={image} />\r\n          </div>\r\n          <div className=\"current-weather\">{tempe}Â°</div>\r\n        </div>\r\n        <div className=\"footer\">{description}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./styletop.scss\";\r\nimport \"./../sass/styleapp.scss\";\r\nimport Weather from \"./weather\";\r\n\r\n\r\n\r\n\r\nexport default class TopSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \r\n      \r\n     \r\n    };\r\n   \r\n  }\r\n  \r\n  render() {\r\n \r\n   \r\n\r\n    return (\r\n      <>\r\n      <div className=\"top-container\">\r\n        <div className=\"title\">Weather app</div>\r\n        <Weather {...this.props} />\r\n         \r\n      </div>\r\n   </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./stylebottom.scss\";\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport Image from 'react-bootstrap/Image';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Forcastday extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n    const day = new Date(parseInt(this.props.dateString) * 1000);\r\n    const nameDay = days[day.getDay(day)]\r\n    const month = months[day.getMonth(day)]\r\n    const date = day.getDate(day)\r\n    const image = `http://openweathermap.org/img/wn/${this.props.img}@2x.png`\r\n    const maxTemp = Math.round(this.props.max, 1)\r\n    const minTemp = Math.round(this.props.min, 1)\r\n    const windSpeed = Math.round(this.props.wind, 1)\r\n\r\n    return (\r\n      <div className=\"forcastday-container\">\r\n          <div className=\"forcastday\">\r\n       <Card className=\" text-center mt-2\">\r\n            <Card.Header as=\"h6\">{nameDay}{\"-\"}{date}{\"-\"}{month}</Card.Header>\r\n            <Image className=\"mx-auto imge1\" src={image} alt={this.props.alt} />\r\n            <Card.Body>\r\n           \r\n          <Card.Body>\r\n          <Card.Text className=\"text2\">{this.props.text}</Card.Text>\r\n          </Card.Body>\r\n      \r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\"><sup>o</sup>C</th>\r\n              <th>W</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{maxTemp }</td>\r\n              <td>{ minTemp}</td>\r\n              <td>{windSpeed }</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Forcastday from \"./forcastday\";\r\nimport \"./stylebottom.scss\";\r\n\r\n\r\n\r\nexport default class BottomSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n \r\n  render() {\r\n    const { forecastdays } = this.props;\r\n    return (\r\n      <>\r\n      <div className=\"bottom-container\">\r\n        <div className=\"inner-container\">\r\n        {forecastdays && forecastdays.map((current, i) => {\r\n              return <Forcastday day={current.day} key={i}dateString={current.dt} img={current.weather[0].icon} alt={current.weather[0].description} text={current.weather[0].main} max={current.temp.max} min={current.temp.min} wind={current.wind_speed} />;\r\n            })}\r\n        </div>\r\n      </div>\r\n      </>\r\n    )\r\n\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nimport \"./App.css\";\n\nimport \"./sass/styleapp.scss\";\n\nimport TopSection from \"./components/top\";\nimport BottomSection from \"./components/bottom\";\nimport axios from \"axios\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"Cork\",\n      isLoading: true,\n      weather: []\n      };\n      \n      \n  }\n  updateWeather() {\n   \n   \n    \n  \n    const URL = `https://api.openweathermap.org/data/2.5/onecall?lat=51.898753&lon=-8.470631&exclude=hourly,minutely&units=metric&appid=bc8436b0fb4c2bdc41566220a43838f6`;\n  \n\n    axios.get(URL).then(res => {\n      console.log(\"data:\",res)\n      return res.data;\n     \n    \n    }).then(data => {\n      this.setState({\n        isLoading: false,\n        temp: data.current.temp,\n      \n        description: data.current.weather[0].description,\n        img: data.current.weather[0].icon,\n        forecastdays:data.daily\n       \n      });\n    })\n      .catch((err )=> {\n      if (err) console.error(\"Cannot fetch Weather Data from API, \", err);\n    })\n  }\n \n  \n  componentDidMount() {\n  \n    this.updateWeather();\n  \n  }\n\n\n  render() {\n    const { isLoading, cityName, temp, description, img  ,forecastdays} = this.state;\n   \n    return (\n      <>\n      <div className=\"app-container\">\n        <div className=\"main-container\">\n          {isLoading && <h3>Loading Weather...</h3>}\n          {!isLoading && (\n            <div className=\"top-section\">\n            <TopSection   location={cityName} temp={temp} description={ description} img={img}  />\n            </div> )}\n          <div className=\"bottom-section\">\n          <BottomSection forecastdays={forecastdays} />\n          </div>\n\n          </div>\n        </div>\n        </>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport default class Store extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.eventEmitter = new EventEmitter();\r\n        this.state = {\r\n            appName: \"Weather App\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return React.Children.map(this.props.children, child => {\r\n            return React.cloneElement(child, {\r\n                ...this.state,\r\n                eventEmitter: this.eventEmitter\r\n            });\r\n        });\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Store from \"./store\";\n\nReactDOM.render(\n  <Store>\n    <App />\n  </Store>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}